package com.example.qrcodegenerator

import android.graphics.Bitmap
import androidx.compose.foundation.Image
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.material3.TextFieldDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.input.TextFieldValue
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.example.qrcodegenerator.ui.theme.Purple80
import com.example.qrcodegenerator.ui.theme.QrCodeGeneratorTheme
import com.google.zxing.BarcodeFormat
import com.google.zxing.qrcode.QRCodeWriter


@OptIn(ExperimentalMaterial3Api::class)
@Composable

fun QRCodeApp(){
    var textValue by remember { //Crio uma variável que mantém os estados dos componentes
        mutableStateOf(TextFieldValue("")) }
    var qrCodeGenerated by remember {
        mutableStateOf<Bitmap?>(null)
    }
    Column(
        horizontalAlignment = Alignment.CenterHorizontally, //Aqui faço tudo fica centralizado horizontalmente
        modifier = Modifier.padding(horizontal = 20.dp),
        verticalArrangement = Arrangement.SpaceEvenly, //Dou mais espaçamento nos elementos,
        // como estou usando na coluna principal ele afeta todos

    ) {
        Column(horizontalAlignment = Alignment.CenterHorizontally) {
            Text(
                text = "Gerador de QR Code",
                textAlign = TextAlign.Center
            )

            if(qrCodeGenerated != null){
                Image(bitmap = qrCodeGenerated!!.asImageBitmap(),
                    contentDescription = "QR Code Gerado",
                    modifier = Modifier.size(220.dp))
            }else{
                Icon(
                    painter = painterResource(id = R.drawable.baseline_qr_code_scanner_24),
                    contentDescription = "QR code nulo",
                    modifier = Modifier.size(220.dp)
                )
            }


        }

        Column {


            TextField(value = textValue, //Aqui to mexendo no campo de inserção de texto
                modifier = Modifier
                    .border( //Estou mexendo nas bordas
                        width = 2.dp,
                        color = Purple80,
                        shape = RoundedCornerShape(10.dp) //Mexo no shape da borda deixando as pontas arredondadas
                    )
                    .fillMaxWidth(),
                placeholder = { //Placeholder é esse texto que fica quando não tem nada, abaixo as configurações dele
                    Text(
                        text = "Digite algo",
                        textAlign = TextAlign.Center,
                        modifier = Modifier.fillMaxWidth()
                    )
                },
                shape = RoundedCornerShape(10.dp),
                colors = TextFieldDefaults.textFieldColors(
                    containerColor = Color.White
                ),
                onValueChange = { //A lógica de pegar o texto começa no onValueChange
                    textValue = it //Ele pega o valo que recebe em it e armazena em textValue
                })

            Spacer(Modifier.height(20.dp))

            RoundedButton(
                onClick = {
                    qrCodeGenerated = generateQrCode(textValue.text)
                }, //Aqui chamo minha função RoundedButton, invoco e a uso
                enabled = textValue.text.isNotEmpty(), //Se o texto estiver vazio desativa o botão
                // e só ativa quando digitar algo
                color = Color.Green,
                text = "Gerar QR Code"
            )
        }
    }

}

fun generateQrCode(text: String): Bitmap {
    val matrix = QRCodeWriter().encode(text, BarcodeFormat.QR_CODE, 512, 512)
    val widht = matrix.width
    val height = matrix.height

    val bitmap = Bitmap.createBitmap(widht, height, Bitmap.Config.RGB_565)

    for(y in 0 until height){
        for(x in 0 until widht){
            bitmap.setPixel(x, y, if(matrix.get(x, y)) android.graphics.Color.BLACK
            else android.graphics.Color.WHITE)
        }

    }

    return bitmap
}


@Composable
fun RoundedButton(onClick:() -> Unit,
                  enabled: Boolean,
                  color: Color,
                  text: String){
    Button(onClick = onClick,
            enabled = enabled,
            shape = RoundedCornerShape(20.dp),
            modifier = Modifier.fillMaxWidth(),
            colors = ButtonDefaults.buttonColors(
                containerColor = color,
                contentColor = Color.Black
            )
    ) {
        Text(text,
            modifier = Modifier.padding(vertical = 6.dp),
            color = Color.Black)
    }
}

@Preview(showBackground = true) //Aqui estou mostrando com preview juntamente com o fundo
@Composable

//Essa função é responsável pela configuração do background
fun QRCodeAppPreview(){
    QrCodeGeneratorTheme(dynamicColor = false) {
            Surface( //Container igual column
                modifier = Modifier.fillMaxSize(), //Preenchendo tudo tanto na horizontal, quanto na vertical
                color = MaterialTheme.colorScheme.background

            ) {
                QRCodeApp()
            }
    }
}